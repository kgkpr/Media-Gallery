{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LOQ\\\\Desktop\\\\project-root\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Configure axios defaults\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get('http://localhost:5000/api/auth/me');\n          setUser(response.data.user);\n        } catch (error) {\n          console.error('Auth check failed:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      localStorage.setItem('userId', userData._id);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const googleLogin = async googleToken => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/google-login', {\n        token: googleToken\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      localStorage.setItem('userId', userData._id);\n      toast.success('Google login successful!');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Google login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\n        name,\n        email,\n        password\n      });\n\n      // Handle the new response format with token\n      if (response.data.token) {\n        const {\n          token: newToken,\n          user: userData\n        } = response.data;\n        setToken(newToken);\n        setUser(userData);\n        localStorage.setItem('token', newToken);\n        toast.success('Registration successful! You can now login.');\n        return true;\n      } else {\n        toast.success('Registration successful! Please check your email for verification.');\n        return true;\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const verifyEmail = async (email, otp) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/verify-email', {\n        email,\n        otp\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      toast.success('Email verified successfully!');\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Email verification failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset email sent!');\n      return true;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to send reset email';\n      toast.error(message);\n      return false;\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/reset-password', {\n        token,\n        newPassword\n      });\n      toast.success('Password reset successful!');\n      return true;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password reset failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n    toast.success('Logged out successfully');\n  };\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    googleLogin,\n    register,\n    verifyEmail,\n    forgotPassword,\n    resetPassword,\n    logout,\n    updateUser,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"V8bE6DZSV5/nB2UMC4Uofie15PA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","defaults","headers","common","checkAuth","response","get","data","error","console","logout","login","email","password","post","newToken","userData","setItem","_id","success","_error$response","_error$response$data","message","googleLogin","googleToken","_error$response2","_error$response2$data","register","name","_error$response3","_error$response3$data","verifyEmail","otp","_error$response4","_error$response4$data","forgotPassword","_error$response5","_error$response5$data","resetPassword","newPassword","_error$response6","_error$response6$data","removeItem","updateUser","value","isAuthenticated","isAdmin","role","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LOQ/Desktop/project-root/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // Configure axios defaults\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [token]);\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      if (token) {\r\n        try {\r\n          const response = await axios.get('http://localhost:5000/api/auth/me');\r\n          setUser(response.data.user);\r\n        } catch (error) {\r\n          console.error('Auth check failed:', error);\r\n          logout();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/login', {\r\n        email,\r\n        password\r\n      });\r\n      \r\n      const { token: newToken, user: userData } = response.data;\r\n      \r\n      setToken(newToken);\r\n      setUser(userData);\r\n      localStorage.setItem('token', newToken);\r\n      localStorage.setItem('userId', userData._id);\r\n      \r\n      toast.success('Login successful!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Login failed';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const googleLogin = async (googleToken) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/google-login', {\r\n        token: googleToken\r\n      });\r\n      \r\n      const { token: newToken, user: userData } = response.data;\r\n      \r\n      setToken(newToken);\r\n      setUser(userData);\r\n      localStorage.setItem('token', newToken);\r\n      localStorage.setItem('userId', userData._id);\r\n      \r\n      toast.success('Google login successful!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Google login failed';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\r\n        name,\r\n        email,\r\n        password\r\n      });\r\n      \r\n      // Handle the new response format with token\r\n      if (response.data.token) {\r\n        const { token: newToken, user: userData } = response.data;\r\n        \r\n        setToken(newToken);\r\n        setUser(userData);\r\n        localStorage.setItem('token', newToken);\r\n        \r\n        toast.success('Registration successful! You can now login.');\r\n        return true;\r\n      } else {\r\n        toast.success('Registration successful! Please check your email for verification.');\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Registration failed';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async (email, otp) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/verify-email', {\r\n        email,\r\n        otp\r\n      });\r\n      \r\n      const { token: newToken, user: userData } = response.data;\r\n      \r\n      setToken(newToken);\r\n      setUser(userData);\r\n      localStorage.setItem('token', newToken);\r\n      \r\n      toast.success('Email verified successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Email verification failed';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/auth/forgot-password', { email });\r\n      toast.success('Password reset email sent!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to send reset email';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token, newPassword) => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/auth/reset-password', {\r\n        token,\r\n        newPassword\r\n      });\r\n      toast.success('Password reset successful!');\r\n      return true;\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Password reset failed';\r\n      toast.error(message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    googleLogin,\r\n    register,\r\n    verifyEmail,\r\n    forgotPassword,\r\n    resetPassword,\r\n    logout,\r\n    updateUser,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin'\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGV,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAACoB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;;EAEjE;EACApB,SAAS,CAAC,MAAM;IACd,IAAIiB,KAAK,EAAE;MACThB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;IACpE,CAAC,MAAM;MACL,OAAOhB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACvD;EACF,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;;EAEX;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMwB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIP,KAAK,EAAE;QACT,IAAI;UACF,MAAMQ,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAC,mCAAmC,CAAC;UACrEZ,OAAO,CAACW,QAAQ,CAACE,IAAI,CAACd,IAAI,CAAC;QAC7B,CAAC,CAAC,OAAOe,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1CE,MAAM,CAAC,CAAC;QACV;MACF;MACAd,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEX,MAAMc,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMxB,KAAK,CAACiC,IAAI,CAAC,sCAAsC,EAAE;QACxEF,KAAK;QACLC;MACF,CAAC,CAAC;MAEF,MAAM;QAAEhB,KAAK,EAAEkB,QAAQ;QAAEtB,IAAI,EAAEuB;MAAS,CAAC,GAAGX,QAAQ,CAACE,IAAI;MAEzDT,QAAQ,CAACiB,QAAQ,CAAC;MAClBrB,OAAO,CAACsB,QAAQ,CAAC;MACjBjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;MACvChB,YAAY,CAACkB,OAAO,CAAC,QAAQ,EAAED,QAAQ,CAACE,GAAG,CAAC;MAE5CpC,KAAK,CAACqC,OAAO,CAAC,mBAAmB,CAAC;MAClC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAY,eAAA,EAAAC,oBAAA;MACd,MAAMC,OAAO,GAAG,EAAAF,eAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBb,IAAI,cAAAc,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,cAAc;MAC/DxC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMC,WAAW,GAAG,MAAOC,WAAW,IAAK;IACzC,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMxB,KAAK,CAACiC,IAAI,CAAC,6CAA6C,EAAE;QAC/EjB,KAAK,EAAE2B;MACT,CAAC,CAAC;MAEF,MAAM;QAAE3B,KAAK,EAAEkB,QAAQ;QAAEtB,IAAI,EAAEuB;MAAS,CAAC,GAAGX,QAAQ,CAACE,IAAI;MAEzDT,QAAQ,CAACiB,QAAQ,CAAC;MAClBrB,OAAO,CAACsB,QAAQ,CAAC;MACjBjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;MACvChB,YAAY,CAACkB,OAAO,CAAC,QAAQ,EAAED,QAAQ,CAACE,GAAG,CAAC;MAE5CpC,KAAK,CAACqC,OAAO,CAAC,0BAA0B,CAAC;MACzC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAiB,gBAAA,EAAAC,qBAAA;MACd,MAAMJ,OAAO,GAAG,EAAAG,gBAAA,GAAAjB,KAAK,CAACH,QAAQ,cAAAoB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBlB,IAAI,cAAAmB,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,qBAAqB;MACtExC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMK,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEhB,KAAK,EAAEC,QAAQ,KAAK;IAChD,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMxB,KAAK,CAACiC,IAAI,CAAC,yCAAyC,EAAE;QAC3Ec,IAAI;QACJhB,KAAK;QACLC;MACF,CAAC,CAAC;;MAEF;MACA,IAAIR,QAAQ,CAACE,IAAI,CAACV,KAAK,EAAE;QACvB,MAAM;UAAEA,KAAK,EAAEkB,QAAQ;UAAEtB,IAAI,EAAEuB;QAAS,CAAC,GAAGX,QAAQ,CAACE,IAAI;QAEzDT,QAAQ,CAACiB,QAAQ,CAAC;QAClBrB,OAAO,CAACsB,QAAQ,CAAC;QACjBjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;QAEvCjC,KAAK,CAACqC,OAAO,CAAC,6CAA6C,CAAC;QAC5D,OAAO,IAAI;MACb,CAAC,MAAM;QACLrC,KAAK,CAACqC,OAAO,CAAC,oEAAoE,CAAC;QACnF,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAqB,gBAAA,EAAAC,qBAAA;MACd,MAAMR,OAAO,GAAG,EAAAO,gBAAA,GAAArB,KAAK,CAACH,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtB,IAAI,cAAAuB,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,qBAAqB;MACtExC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMS,WAAW,GAAG,MAAAA,CAAOnB,KAAK,EAAEoB,GAAG,KAAK;IACxC,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMxB,KAAK,CAACiC,IAAI,CAAC,6CAA6C,EAAE;QAC/EF,KAAK;QACLoB;MACF,CAAC,CAAC;MAEF,MAAM;QAAEnC,KAAK,EAAEkB,QAAQ;QAAEtB,IAAI,EAAEuB;MAAS,CAAC,GAAGX,QAAQ,CAACE,IAAI;MAEzDT,QAAQ,CAACiB,QAAQ,CAAC;MAClBrB,OAAO,CAACsB,QAAQ,CAAC;MACjBjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;MAEvCjC,KAAK,CAACqC,OAAO,CAAC,8BAA8B,CAAC;MAC7C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAyB,gBAAA,EAAAC,qBAAA;MACd,MAAMZ,OAAO,GAAG,EAAAW,gBAAA,GAAAzB,KAAK,CAACH,QAAQ,cAAA4B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1B,IAAI,cAAA2B,qBAAA,uBAApBA,qBAAA,CAAsBZ,OAAO,KAAI,2BAA2B;MAC5ExC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMa,cAAc,GAAG,MAAOvB,KAAK,IAAK;IACtC,IAAI;MACF,MAAM/B,KAAK,CAACiC,IAAI,CAAC,gDAAgD,EAAE;QAAEF;MAAM,CAAC,CAAC;MAC7E9B,KAAK,CAACqC,OAAO,CAAC,4BAA4B,CAAC;MAC3C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA4B,gBAAA,EAAAC,qBAAA;MACd,MAAMf,OAAO,GAAG,EAAAc,gBAAA,GAAA5B,KAAK,CAACH,QAAQ,cAAA+B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7B,IAAI,cAAA8B,qBAAA,uBAApBA,qBAAA,CAAsBf,OAAO,KAAI,4BAA4B;MAC7ExC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMgB,aAAa,GAAG,MAAAA,CAAOzC,KAAK,EAAE0C,WAAW,KAAK;IAClD,IAAI;MACF,MAAM1D,KAAK,CAACiC,IAAI,CAAC,+CAA+C,EAAE;QAChEjB,KAAK;QACL0C;MACF,CAAC,CAAC;MACFzD,KAAK,CAACqC,OAAO,CAAC,4BAA4B,CAAC;MAC3C,OAAO,IAAI;IACb,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAgC,gBAAA,EAAAC,qBAAA;MACd,MAAMnB,OAAO,GAAG,EAAAkB,gBAAA,GAAAhC,KAAK,CAACH,QAAQ,cAAAmC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBjC,IAAI,cAAAkC,qBAAA,uBAApBA,qBAAA,CAAsBnB,OAAO,KAAI,uBAAuB;MACxExC,KAAK,CAAC0B,KAAK,CAACc,OAAO,CAAC;MACpB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMZ,MAAM,GAAGA,CAAA,KAAM;IACnBhB,OAAO,CAAC,IAAI,CAAC;IACbI,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAAC2C,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO7D,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACrDrB,KAAK,CAACqC,OAAO,CAAC,yBAAyB,CAAC;EAC1C,CAAC;EAED,MAAMwB,UAAU,GAAI3B,QAAQ,IAAK;IAC/BtB,OAAO,CAACsB,QAAQ,CAAC;EACnB,CAAC;EAED,MAAM4B,KAAK,GAAG;IACZnD,IAAI;IACJE,OAAO;IACPgB,KAAK;IACLY,WAAW;IACXI,QAAQ;IACRI,WAAW;IACXI,cAAc;IACdG,aAAa;IACb5B,MAAM;IACNiC,UAAU;IACVE,eAAe,EAAE,CAAC,CAACpD,IAAI;IACvBqD,OAAO,EAAE,CAAArD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsD,IAAI,MAAK;EAC1B,CAAC;EAED,oBACE/D,OAAA,CAACC,WAAW,CAAC+D,QAAQ;IAACJ,KAAK,EAAEA,KAAM;IAAArD,QAAA,EAChCA;EAAQ;IAAA0D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5D,GAAA,CA3LWF,YAAY;AAAA+D,EAAA,GAAZ/D,YAAY;AAAA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LOQ\\\\Desktop\\\\project-root\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Configure axios defaults\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get('http://localhost:5000/api/auth/me');\n          setUser(response.data.user);\n        } catch (error) {\n          console.error('Auth check failed:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const googleLogin = async googleToken => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/google-login', {\n        token: googleToken\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      toast.success('Google login successful!');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Google login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\n        name,\n        email,\n        password\n      });\n\n      // Handle the new response format - now requires verification\n      if (response.data.requiresVerification) {\n        toast.success('Registration successful! Please check your email for the verification code.');\n        return {\n          requiresVerification: true,\n          email: response.data.email\n        };\n      } else if (response.data.token) {\n        // Fallback for immediate login (if auto-verification is enabled)\n        const {\n          token: newToken,\n          user: userData\n        } = response.data;\n        setToken(newToken);\n        setUser(userData);\n        localStorage.setItem('token', newToken);\n        toast.success('Registration successful! You can now login.');\n        return {\n          requiresVerification: false\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const verifyEmail = async (email, otp) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/verify-email', {\n        email,\n        otp\n      });\n      const {\n        token: newToken,\n        user: userData\n      } = response.data;\n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      toast.success('Email verified successfully!');\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Email verification failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const resendOTP = async email => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/resend-otp', {\n        email\n      });\n      toast.success('New verification code sent to your email!');\n      return true;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to resend verification code';\n      toast.error(message);\n      return false;\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset email sent!');\n      return true;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to send reset email';\n      toast.error(message);\n      return false;\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/reset-password', {\n        token,\n        newPassword\n      });\n      toast.success('Password reset successful!');\n      return true;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      const message = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Password reset failed';\n      toast.error(message);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n    toast.success('Logged out successfully');\n  };\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    googleLogin,\n    register,\n    verifyEmail,\n    forgotPassword,\n    resetPassword,\n    logout,\n    updateUser,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"V8bE6DZSV5/nB2UMC4Uofie15PA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","defaults","headers","common","checkAuth","response","get","data","error","console","logout","login","email","password","post","newToken","userData","setItem","success","_error$response","_error$response$data","message","googleLogin","googleToken","_error$response2","_error$response2$data","register","name","requiresVerification","_error$response3","_error$response3$data","verifyEmail","otp","_error$response4","_error$response4$data","resendOTP","_error$response5","_error$response5$data","forgotPassword","_error$response6","_error$response6$data","resetPassword","newPassword","_error$response7","_error$response7$data","removeItem","updateUser","value","isAuthenticated","isAdmin","role","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LOQ/Desktop/project-root/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Configure axios defaults\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get('http://localhost:5000/api/auth/me');\n          setUser(response.data.user);\n        } catch (error) {\n          console.error('Auth check failed:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, [token]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/login', {\n        email,\n        password\n      });\n      \n      const { token: newToken, user: userData } = response.data;\n      \n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      \n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const googleLogin = async (googleToken) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/google-login', {\n        token: googleToken\n      });\n      \n      const { token: newToken, user: userData } = response.data;\n      \n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      \n      toast.success('Google login successful!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Google login failed';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/register', {\n        name,\n        email,\n        password\n      });\n      \n      // Handle the new response format - now requires verification\n      if (response.data.requiresVerification) {\n        toast.success('Registration successful! Please check your email for the verification code.');\n        return { requiresVerification: true, email: response.data.email };\n      } else if (response.data.token) {\n        // Fallback for immediate login (if auto-verification is enabled)\n        const { token: newToken, user: userData } = response.data;\n        \n        setToken(newToken);\n        setUser(userData);\n        localStorage.setItem('token', newToken);\n        \n        toast.success('Registration successful! You can now login.');\n        return { requiresVerification: false };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Registration failed';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const verifyEmail = async (email, otp) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/verify-email', {\n        email,\n        otp\n      });\n      \n      const { token: newToken, user: userData } = response.data;\n      \n      setToken(newToken);\n      setUser(userData);\n      localStorage.setItem('token', newToken);\n      \n      toast.success('Email verified successfully!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Email verification failed';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const resendOTP = async (email) => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/resend-otp', {\n        email\n      });\n      \n      toast.success('New verification code sent to your email!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Failed to resend verification code';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/forgot-password', { email });\n      toast.success('Password reset email sent!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Failed to send reset email';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const resetPassword = async (token, newPassword) => {\n    try {\n      await axios.post('http://localhost:5000/api/auth/reset-password', {\n        token,\n        newPassword\n      });\n      toast.success('Password reset successful!');\n      return true;\n    } catch (error) {\n      const message = error.response?.data?.message || 'Password reset failed';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n    toast.success('Logged out successfully');\n  };\n\n  const updateUser = (userData) => {\n    setUser(userData);\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    googleLogin,\n    register,\n    verifyEmail,\n    forgotPassword,\n    resetPassword,\n    logout,\n    updateUser,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === 'admin'\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}